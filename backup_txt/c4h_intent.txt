== Manifest ==
src/intent_system/__init__.py
src/intent_system/__main__.py
src/intent_system/config/__init__.py
src/intent_system/config/providers.py
src/intent_system/agents/__init__.py
src/intent_system/agents/orchestrator.py
src/intent_system/agents/base.py
src/intent_system/models/intent.py
src/intent_system/models/__init__.py
src/intent_system/api/__init__.py
src/intent_system/api/endpoints/__init__.py
src/intent_system/skills/tartxt.py
src/intent_system/skills/__init__.py
src/intent_system/services/__init__.py
tests/__init__.py
tests/unit/__init__.py
tests/integration/__init__.py

== Content ==

== Start of File ==
File: src/intent_system/__init__.py
File Type: text/x-python
Size: 0 bytes
Last Modified: 1730629431.5866377
Contents:

== End of File ==

== Start of File ==
File: src/intent_system/__main__.py
File Type: text/x-python
Size: 398 bytes
Last Modified: 1730629431.5895991
Contents:
import asyncio
import os
from pathlib import Path
import yaml

async def main():
    # Load configuration
    config_path = Path("config/system_config.yml")
    with open(config_path) as f:
        config = yaml.safe_load(f)
    
    # TODO: Initialize system components
    print("Intent System initialized with config:", config["default_llm"])

if __name__ == "__main__":
    asyncio.run(main())

== End of File ==

== Start of File ==
File: src/intent_system/config/__init__.py
File Type: text/x-python
Size: 0 bytes
Last Modified: 1730629431.5870886
Contents:

== End of File ==

== Start of File ==
File: src/intent_system/config/providers.py
File Type: text/x-python
Size: 863 bytes
Last Modified: 1730629876.9038692
Contents:
from enum import Enum
from typing import Dict, Any, Optional
from pydantic import BaseModel

class LLMProvider(str, Enum):
    OPENAI = "openai"
    ANTHROPIC = "anthropic"
    GEMINI = "gemini"

class ProviderConfig(BaseModel):
    model: str
    api_key_env: str
    timeout: int = 120
    temperature: float = 0
    additional_params: Dict[str, Any] = {}

DEFAULT_PROVIDER_CONFIGS = {
    LLMProvider.OPENAI: {
        "model": "gpt-4",
        "api_key_env": "OPENAI_API_KEY",
        "timeout": 120,
        "temperature": 0
    },
    LLMProvider.ANTHROPIC: {
        "model": "claude-3-opus-20240229",
        "api_key_env": "ANTHROPIC_API_KEY",
        "timeout": 120,
        "temperature": 0
    },
    LLMProvider.GEMINI: {
        "model": "gemini-pro",
        "api_key_env": "GEMINI_API_KEY",
        "timeout": 120,
        "temperature": 0
    }
}
== End of File ==

== Start of File ==
File: src/intent_system/agents/__init__.py
File Type: text/x-python
Size: 0 bytes
Last Modified: 1730629431.5867336
Contents:

== End of File ==

== Start of File ==
File: src/intent_system/agents/orchestrator.py
File Type: text/x-python
Size: 1063 bytes
Last Modified: 1730629431.5895214
Contents:
from typing import Dict, Any
from autogen import AssistantAgent
from .base import BaseAgent
from ..models.intent import Intent

class OrchestratorAgent(BaseAgent):
    async def process_intent(self, intent: Intent) -> Intent:
        """Process and potentially decompose an intent"""
        response = await self.agent.process_interaction(
            messages=[{
                "role": "user",
                "content": f"Analyze intent: {intent.dict()}"
            }]
        )
        
        # Process the response and update intent
        return intent

    async def handle_error(self, error: Exception, intent: Intent) -> Intent:
        """Create debug intent for error handling"""
        debug_intent = Intent(
            type="debug",
            description=f"Error handling for {intent.id}: {str(error)}",
            environment=intent.environment,
            context={"original_intent": intent.dict(), "error": str(error)},
            criteria={"resolve_error": True},
            parent_id=intent.id
        )
        return debug_intent

== End of File ==

== Start of File ==
File: src/intent_system/agents/base.py
File Type: text/x-python
Size: 3875 bytes
Last Modified: 1730630000.7044015
Contents:
# src/intent_system/agents/base.py
from abc import ABC, abstractmethod
from typing import Optional, Dict, Any, List
from autogen import AssistantAgent, UserProxyAgent
from ..models.intent import Intent
from ..config.providers import LLMProvider, ProviderConfig
import os

class BaseAgent(ABC):
    def __init__(self, config: Dict[str, Any]):
        self.config = config
        self.name = config["name"]
        self.providers = self._setup_providers()
        self._initialize_agent()

    def _setup_providers(self) -> Dict[LLMProvider, ProviderConfig]:
        """Setup all configured LLM providers"""
        providers = {}
        llm_config = self.config["llm_config"]
        
        # Setup primary provider
        primary = llm_config["primary_provider"]
        providers[primary] = self._get_provider_config(primary)
        
        # Setup fallback providers
        for provider in llm_config.get("fallback_providers", []):
            providers[provider] = self._get_provider_config(provider)
            
        return providers

    def _get_provider_config(self, provider: str) -> ProviderConfig:
        """Get configuration for specific provider"""
        provider_config = self.config.get("providers", {}).get(provider, {})
        
        # Ensure API key is available
        api_key_env = provider_config.get("api_key_env")
        if not api_key_env or not os.getenv(api_key_env):
            raise ValueError(f"API key not found for provider {provider}")
            
        return ProviderConfig(**provider_config)

    def _initialize_agent(self):
        """Initialize the AutoGen agent with primary provider"""
        primary_provider = self.config["llm_config"]["primary_provider"]
        provider_config = self.providers[primary_provider]
        
        self.agent = AssistantAgent(
            name=self.name,
            system_message=self.config["base_prompt"],
            llm_config={
                "config_list": [{
                    "model": provider_config.model,
                    "api_key": os.getenv(provider_config.api_key_env)
                }],
                "temperature": provider_config.temperature,
                "request_timeout": provider_config.timeout,
                **provider_config.additional_params
            }
        )
        
        # Initialize fallback agents
        self.fallback_agents = {}
        for provider in self.config["llm_config"].get("fallback_providers", []):
            provider_config = self.providers[provider]
            self.fallback_agents[provider] = AssistantAgent(
                name=f"{self.name}_{provider}",
                system_message=self.config["base_prompt"],
                llm_config={
                    "config_list": [{
                        "model": provider_config.model,
                        "api_key": os.getenv(provider_config.api_key_env)
                    }],
                    "temperature": provider_config.temperature,
                    "request_timeout": provider_config.timeout,
                    **provider_config.additional_params
                }
            )

    async def try_with_fallbacks(self, func, *args, **kwargs):
        """Try operation with primary agent, fall back to others if needed"""
        try:
            return await func(self.agent, *args, **kwargs)
        except Exception as e:
            for provider, fallback_agent in self.fallback_agents.items():
                try:
                    return await func(fallback_agent, *args, **kwargs)
                except Exception as fallback_e:
                    continue
            raise Exception("All providers failed")

    @abstractmethod
    async def process_intent(self, intent: Intent) -> Intent:
        pass

    @abstractmethod
    async def handle_error(self, error: Exception, intent: Intent) -> Intent:
        pass
== End of File ==

== Start of File ==
File: src/intent_system/models/intent.py
File Type: text/x-python
Size: 436 bytes
Last Modified: 1730629431.5893605
Contents:
from pydantic import BaseModel
from uuid import UUID, uuid4
from typing import Optional, List, Dict, Any
from datetime import datetime

class Intent(BaseModel):
    id: UUID = uuid4()
    type: str
    description: str
    environment: Dict[str, Any]
    context: Dict[str, Any]
    criteria: Dict[str, Any]
    parent_id: Optional[UUID] = None
    children: List[UUID] = []
    status: str
    created_at: datetime = datetime.utcnow()

== End of File ==

== Start of File ==
File: src/intent_system/models/__init__.py
File Type: text/x-python
Size: 0 bytes
Last Modified: 1730629431.5868247
Contents:

== End of File ==

== Start of File ==
File: src/intent_system/api/__init__.py
File Type: text/x-python
Size: 0 bytes
Last Modified: 1730629431.5871816
Contents:

== End of File ==

== Start of File ==
File: src/intent_system/api/endpoints/__init__.py
File Type: text/x-python
Size: 0 bytes
Last Modified: 1730629431.5872834
Contents:

== End of File ==

== Start of File ==
File: src/intent_system/skills/tartxt.py
File Type: text/x-python
Size: 4202 bytes
Last Modified: 1730630233.6168149
Contents:
# src/skills/tartxt.py

import os
import sys
import glob
import argparse
from typing import List, Tuple
import mimetypes

def get_file_metadata(file_path: str) -> Tuple[str, int, str]:
    """Get file metadata including MIME type, size, and last modified date."""
    mime_type, _ = mimetypes.guess_type(file_path)
    file_size = os.path.getsize(file_path)
    last_modified = os.path.getmtime(file_path)
    return mime_type or "application/octet-stream", file_size, last_modified

def is_text_file(file_path: str) -> bool:
    """Check if a file is a text file based on its MIME type and extension."""
    mime_type, _ = mimetypes.guess_type(file_path)
    
    # List of common text-based file extensions
    text_file_extensions = ['.dart', '.js', '.java', '.py', '.cpp', '.c', '.h', '.html', '.css', '.txt', '.md', '.sh']

    if mime_type and (mime_type.startswith('text/') or mime_type in [
        'application/x-sh',
        'application/x-shellscript'
    ]):
        return True
    
    # Check the file extension as a fallback
    ext = os.path.splitext(file_path)[1].lower()
    return ext in text_file_extensions

def process_files(files: List[str], exclusions: List[str]) -> str:
    """Process files and directories, excluding specified patterns."""
    output = "== Manifest ==\n"
    content = "\n== Content ==\n"

    for item in files:
        if os.path.isdir(item):
            for root, _, filenames in os.walk(item):
                for filename in filenames:
                    file_path = os.path.join(root, filename)
                    if not any(glob.fnmatch.fnmatch(file_path, pat) for pat in exclusions):
                        output += f"{file_path}\n"
                        content += process_file(file_path)
        elif os.path.isfile(item):
            if not any(glob.fnmatch.fnmatch(item, pat) for pat in exclusions):
                output += f"{item}\n"
                content += process_file(item)
        else:
            output += f"Warning: {item} does not exist, skipping.\n"

    return output + content

def process_file(file_path: str) -> str:
    """Process a single file, returning its content or a skip message for binary files."""
    mime_type, file_size, last_modified = get_file_metadata(file_path)
    
    output = f"\n== Start of File ==\n"
    output += f"File: {file_path}\n"
    output += f"File Type: {mime_type}\n"
    output += f"Size: {file_size} bytes\n"
    output += f"Last Modified: {last_modified}\n"

    if is_text_file(file_path):
        output += "Contents:\n"
        with open(file_path, 'r', encoding='utf-8', errors='ignore') as f:
            output += f.read()
        output += "\n== End of File ==\n"
    else:
        output += "Reason: Binary File, Skipped\n"
        output += "== End of File ==\n"

    return output

def get_incremented_filename(base_filename: str) -> str:
    """Generate an incremented filename if the file already exists."""
    name, ext = os.path.splitext(base_filename)
    counter = 0
    while True:
        new_filename = f"{name}_{counter:03d}{ext}" if counter > 0 else f"{name}{ext}"
        if not os.path.exists(new_filename):
            return new_filename
        counter += 1

def main():
    parser = argparse.ArgumentParser(description="Process and analyze files and directories.")
    parser.add_argument('-x', '--exclude', help="Glob patterns for files to exclude", default="")
    parser.add_argument('-f', '--file', help="Output file name")
    parser.add_argument('-o', '--output', action='store_true', help="Output to stdout")
    parser.add_argument('items', nargs='+', help="Files and directories to process")

    args = parser.parse_args()

    exclusions = [pat.strip() for pat in args.exclude.split(',') if pat.strip()]
    result = process_files(args.items, exclusions)

    if args.output:
        print(result)
    elif args.file:
        output_file = get_incremented_filename(args.file)
        with open(output_file, 'w', encoding='utf-8') as f:
            f.write(result)
        print(f"Output written to {output_file}")
    else:
        print("Error: Either -f or -o must be specified.")
        sys.exit(1)

if __name__ == "__main__":
    main()
== End of File ==

== Start of File ==
File: src/intent_system/skills/__init__.py
File Type: text/x-python
Size: 0 bytes
Last Modified: 1730629431.5869157
Contents:

== End of File ==

== Start of File ==
File: src/intent_system/services/__init__.py
File Type: text/x-python
Size: 0 bytes
Last Modified: 1730629431.5870054
Contents:

== End of File ==

== Start of File ==
File: tests/__init__.py
File Type: text/x-python
Size: 0 bytes
Last Modified: 1730629431.5874665
Contents:

== End of File ==

== Start of File ==
File: tests/unit/__init__.py
File Type: text/x-python
Size: 0 bytes
Last Modified: 1730629431.587552
Contents:

== End of File ==

== Start of File ==
File: tests/integration/__init__.py
File Type: text/x-python
Size: 0 bytes
Last Modified: 1730629431.587633
Contents:

== End of File ==
