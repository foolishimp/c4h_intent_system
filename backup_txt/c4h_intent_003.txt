== Manifest ==
src/intent_system/__init__.py
src/intent_system/__main__.py
src/intent_system/config/__init__.py
src/intent_system/config/providers.py
src/intent_system/agents/__init__.py
src/intent_system/agents/orchestrator.py
src/intent_system/agents/base.py
src/intent_system/models/intent.py
src/intent_system/models/__init__.py
src/intent_system/api/__init__.py
src/intent_system/api/endpoints/__init__.py
src/intent_system/skills/tartxt.py
src/intent_system/skills/__init__.py
src/intent_system/services/__init__.py
tests/.DS_Store
tests/__init__.py
tests/unit/__init__.py
tests/integration/__init__.py
tests/setup/refactor_test_project_setup.sh
tests/test_project/main.py
tests/test_project/f4/step_04.py
tests/test_project/f3/step_03.py
tests/test_project/f2/step_02.py
tests/test_project/data_prep/stage2_input.csv
tests/test_project/data_prep/stage4_input.csv
tests/test_project/data_prep/stage1_input.csv
tests/test_project/data_prep/stage3_input2.csv
tests/test_project/data_prep/stage3_input1.csv
tests/test_project/f1/step_01.py
config/__init__.py
config/system_config.yml

== Content ==

== Start of File ==
File: src/intent_system/__init__.py
File Type: text/x-python
Size: 0 bytes
Last Modified: 1730629431.5866377
Contents:

== End of File ==

== Start of File ==
File: src/intent_system/__main__.py
File Type: text/x-python
Size: 398 bytes
Last Modified: 1730629431.5895991
Contents:
import asyncio
import os
from pathlib import Path
import yaml

async def main():
    # Load configuration
    config_path = Path("config/system_config.yml")
    with open(config_path) as f:
        config = yaml.safe_load(f)
    
    # TODO: Initialize system components
    print("Intent System initialized with config:", config["default_llm"])

if __name__ == "__main__":
    asyncio.run(main())

== End of File ==

== Start of File ==
File: src/intent_system/config/__init__.py
File Type: text/x-python
Size: 0 bytes
Last Modified: 1730629431.5870886
Contents:

== End of File ==

== Start of File ==
File: src/intent_system/config/providers.py
File Type: text/x-python
Size: 863 bytes
Last Modified: 1730629876.9038692
Contents:
from enum import Enum
from typing import Dict, Any, Optional
from pydantic import BaseModel

class LLMProvider(str, Enum):
    OPENAI = "openai"
    ANTHROPIC = "anthropic"
    GEMINI = "gemini"

class ProviderConfig(BaseModel):
    model: str
    api_key_env: str
    timeout: int = 120
    temperature: float = 0
    additional_params: Dict[str, Any] = {}

DEFAULT_PROVIDER_CONFIGS = {
    LLMProvider.OPENAI: {
        "model": "gpt-4",
        "api_key_env": "OPENAI_API_KEY",
        "timeout": 120,
        "temperature": 0
    },
    LLMProvider.ANTHROPIC: {
        "model": "claude-3-opus-20240229",
        "api_key_env": "ANTHROPIC_API_KEY",
        "timeout": 120,
        "temperature": 0
    },
    LLMProvider.GEMINI: {
        "model": "gemini-pro",
        "api_key_env": "GEMINI_API_KEY",
        "timeout": 120,
        "temperature": 0
    }
}
== End of File ==

== Start of File ==
File: src/intent_system/agents/__init__.py
File Type: text/x-python
Size: 0 bytes
Last Modified: 1730629431.5867336
Contents:

== End of File ==

== Start of File ==
File: src/intent_system/agents/orchestrator.py
File Type: text/x-python
Size: 1063 bytes
Last Modified: 1730629431.5895214
Contents:
from typing import Dict, Any
from autogen import AssistantAgent
from .base import BaseAgent
from ..models.intent import Intent

class OrchestratorAgent(BaseAgent):
    async def process_intent(self, intent: Intent) -> Intent:
        """Process and potentially decompose an intent"""
        response = await self.agent.process_interaction(
            messages=[{
                "role": "user",
                "content": f"Analyze intent: {intent.dict()}"
            }]
        )
        
        # Process the response and update intent
        return intent

    async def handle_error(self, error: Exception, intent: Intent) -> Intent:
        """Create debug intent for error handling"""
        debug_intent = Intent(
            type="debug",
            description=f"Error handling for {intent.id}: {str(error)}",
            environment=intent.environment,
            context={"original_intent": intent.dict(), "error": str(error)},
            criteria={"resolve_error": True},
            parent_id=intent.id
        )
        return debug_intent

== End of File ==

== Start of File ==
File: src/intent_system/agents/base.py
File Type: text/x-python
Size: 3875 bytes
Last Modified: 1730630000.7044015
Contents:
# src/intent_system/agents/base.py
from abc import ABC, abstractmethod
from typing import Optional, Dict, Any, List
from autogen import AssistantAgent, UserProxyAgent
from ..models.intent import Intent
from ..config.providers import LLMProvider, ProviderConfig
import os

class BaseAgent(ABC):
    def __init__(self, config: Dict[str, Any]):
        self.config = config
        self.name = config["name"]
        self.providers = self._setup_providers()
        self._initialize_agent()

    def _setup_providers(self) -> Dict[LLMProvider, ProviderConfig]:
        """Setup all configured LLM providers"""
        providers = {}
        llm_config = self.config["llm_config"]
        
        # Setup primary provider
        primary = llm_config["primary_provider"]
        providers[primary] = self._get_provider_config(primary)
        
        # Setup fallback providers
        for provider in llm_config.get("fallback_providers", []):
            providers[provider] = self._get_provider_config(provider)
            
        return providers

    def _get_provider_config(self, provider: str) -> ProviderConfig:
        """Get configuration for specific provider"""
        provider_config = self.config.get("providers", {}).get(provider, {})
        
        # Ensure API key is available
        api_key_env = provider_config.get("api_key_env")
        if not api_key_env or not os.getenv(api_key_env):
            raise ValueError(f"API key not found for provider {provider}")
            
        return ProviderConfig(**provider_config)

    def _initialize_agent(self):
        """Initialize the AutoGen agent with primary provider"""
        primary_provider = self.config["llm_config"]["primary_provider"]
        provider_config = self.providers[primary_provider]
        
        self.agent = AssistantAgent(
            name=self.name,
            system_message=self.config["base_prompt"],
            llm_config={
                "config_list": [{
                    "model": provider_config.model,
                    "api_key": os.getenv(provider_config.api_key_env)
                }],
                "temperature": provider_config.temperature,
                "request_timeout": provider_config.timeout,
                **provider_config.additional_params
            }
        )
        
        # Initialize fallback agents
        self.fallback_agents = {}
        for provider in self.config["llm_config"].get("fallback_providers", []):
            provider_config = self.providers[provider]
            self.fallback_agents[provider] = AssistantAgent(
                name=f"{self.name}_{provider}",
                system_message=self.config["base_prompt"],
                llm_config={
                    "config_list": [{
                        "model": provider_config.model,
                        "api_key": os.getenv(provider_config.api_key_env)
                    }],
                    "temperature": provider_config.temperature,
                    "request_timeout": provider_config.timeout,
                    **provider_config.additional_params
                }
            )

    async def try_with_fallbacks(self, func, *args, **kwargs):
        """Try operation with primary agent, fall back to others if needed"""
        try:
            return await func(self.agent, *args, **kwargs)
        except Exception as e:
            for provider, fallback_agent in self.fallback_agents.items():
                try:
                    return await func(fallback_agent, *args, **kwargs)
                except Exception as fallback_e:
                    continue
            raise Exception("All providers failed")

    @abstractmethod
    async def process_intent(self, intent: Intent) -> Intent:
        pass

    @abstractmethod
    async def handle_error(self, error: Exception, intent: Intent) -> Intent:
        pass
== End of File ==

== Start of File ==
File: src/intent_system/models/intent.py
File Type: text/x-python
Size: 436 bytes
Last Modified: 1730629431.5893605
Contents:
from pydantic import BaseModel
from uuid import UUID, uuid4
from typing import Optional, List, Dict, Any
from datetime import datetime

class Intent(BaseModel):
    id: UUID = uuid4()
    type: str
    description: str
    environment: Dict[str, Any]
    context: Dict[str, Any]
    criteria: Dict[str, Any]
    parent_id: Optional[UUID] = None
    children: List[UUID] = []
    status: str
    created_at: datetime = datetime.utcnow()

== End of File ==

== Start of File ==
File: src/intent_system/models/__init__.py
File Type: text/x-python
Size: 0 bytes
Last Modified: 1730629431.5868247
Contents:

== End of File ==

== Start of File ==
File: src/intent_system/api/__init__.py
File Type: text/x-python
Size: 0 bytes
Last Modified: 1730629431.5871816
Contents:

== End of File ==

== Start of File ==
File: src/intent_system/api/endpoints/__init__.py
File Type: text/x-python
Size: 0 bytes
Last Modified: 1730629431.5872834
Contents:

== End of File ==

== Start of File ==
File: src/intent_system/skills/tartxt.py
File Type: text/x-python
Size: 4202 bytes
Last Modified: 1730630233.6168149
Contents:
# src/skills/tartxt.py

import os
import sys
import glob
import argparse
from typing import List, Tuple
import mimetypes

def get_file_metadata(file_path: str) -> Tuple[str, int, str]:
    """Get file metadata including MIME type, size, and last modified date."""
    mime_type, _ = mimetypes.guess_type(file_path)
    file_size = os.path.getsize(file_path)
    last_modified = os.path.getmtime(file_path)
    return mime_type or "application/octet-stream", file_size, last_modified

def is_text_file(file_path: str) -> bool:
    """Check if a file is a text file based on its MIME type and extension."""
    mime_type, _ = mimetypes.guess_type(file_path)
    
    # List of common text-based file extensions
    text_file_extensions = ['.dart', '.js', '.java', '.py', '.cpp', '.c', '.h', '.html', '.css', '.txt', '.md', '.sh']

    if mime_type and (mime_type.startswith('text/') or mime_type in [
        'application/x-sh',
        'application/x-shellscript'
    ]):
        return True
    
    # Check the file extension as a fallback
    ext = os.path.splitext(file_path)[1].lower()
    return ext in text_file_extensions

def process_files(files: List[str], exclusions: List[str]) -> str:
    """Process files and directories, excluding specified patterns."""
    output = "== Manifest ==\n"
    content = "\n== Content ==\n"

    for item in files:
        if os.path.isdir(item):
            for root, _, filenames in os.walk(item):
                for filename in filenames:
                    file_path = os.path.join(root, filename)
                    if not any(glob.fnmatch.fnmatch(file_path, pat) for pat in exclusions):
                        output += f"{file_path}\n"
                        content += process_file(file_path)
        elif os.path.isfile(item):
            if not any(glob.fnmatch.fnmatch(item, pat) for pat in exclusions):
                output += f"{item}\n"
                content += process_file(item)
        else:
            output += f"Warning: {item} does not exist, skipping.\n"

    return output + content

def process_file(file_path: str) -> str:
    """Process a single file, returning its content or a skip message for binary files."""
    mime_type, file_size, last_modified = get_file_metadata(file_path)
    
    output = f"\n== Start of File ==\n"
    output += f"File: {file_path}\n"
    output += f"File Type: {mime_type}\n"
    output += f"Size: {file_size} bytes\n"
    output += f"Last Modified: {last_modified}\n"

    if is_text_file(file_path):
        output += "Contents:\n"
        with open(file_path, 'r', encoding='utf-8', errors='ignore') as f:
            output += f.read()
        output += "\n== End of File ==\n"
    else:
        output += "Reason: Binary File, Skipped\n"
        output += "== End of File ==\n"

    return output

def get_incremented_filename(base_filename: str) -> str:
    """Generate an incremented filename if the file already exists."""
    name, ext = os.path.splitext(base_filename)
    counter = 0
    while True:
        new_filename = f"{name}_{counter:03d}{ext}" if counter > 0 else f"{name}{ext}"
        if not os.path.exists(new_filename):
            return new_filename
        counter += 1

def main():
    parser = argparse.ArgumentParser(description="Process and analyze files and directories.")
    parser.add_argument('-x', '--exclude', help="Glob patterns for files to exclude", default="")
    parser.add_argument('-f', '--file', help="Output file name")
    parser.add_argument('-o', '--output', action='store_true', help="Output to stdout")
    parser.add_argument('items', nargs='+', help="Files and directories to process")

    args = parser.parse_args()

    exclusions = [pat.strip() for pat in args.exclude.split(',') if pat.strip()]
    result = process_files(args.items, exclusions)

    if args.output:
        print(result)
    elif args.file:
        output_file = get_incremented_filename(args.file)
        with open(output_file, 'w', encoding='utf-8') as f:
            f.write(result)
        print(f"Output written to {output_file}")
    else:
        print("Error: Either -f or -o must be specified.")
        sys.exit(1)

if __name__ == "__main__":
    main()
== End of File ==

== Start of File ==
File: src/intent_system/skills/__init__.py
File Type: text/x-python
Size: 0 bytes
Last Modified: 1730629431.5869157
Contents:

== End of File ==

== Start of File ==
File: src/intent_system/services/__init__.py
File Type: text/x-python
Size: 0 bytes
Last Modified: 1730629431.5870054
Contents:

== End of File ==

== Start of File ==
File: tests/.DS_Store
File Type: application/octet-stream
Size: 6148 bytes
Last Modified: 1730631469.142562
Reason: Binary File, Skipped
== End of File ==

== Start of File ==
File: tests/__init__.py
File Type: text/x-python
Size: 0 bytes
Last Modified: 1730629431.5874665
Contents:

== End of File ==

== Start of File ==
File: tests/unit/__init__.py
File Type: text/x-python
Size: 0 bytes
Last Modified: 1730629431.587552
Contents:

== End of File ==

== Start of File ==
File: tests/integration/__init__.py
File Type: text/x-python
Size: 0 bytes
Last Modified: 1730629431.587633
Contents:

== End of File ==

== Start of File ==
File: tests/setup/refactor_test_project_setup.sh
File Type: application/x-sh
Size: 9033 bytes
Last Modified: 1730296568.8348472
Contents:
#!/bin/bash

# Create test_project directory structure if it doesn't exist
mkdir -p test_project/data_prep
mkdir -p test_project/data_out
mkdir -p test_project/f1
mkdir -p test_project/f2
mkdir -p test_project/f3
mkdir -p test_project/f4

# Create Python scripts for each step

# Step 1: Count Rows
echo """
import csv

def count_rows(file_path):
    with open(file_path, mode='r') as file:
        csv_reader = csv.reader(file)
        row_count = sum(1 for row in csv_reader) - 1  # Exclude header
    print(f\"[Stage 1] Number of rows in {file_path}: {row_count}\")
    return row_count

if __name__ == \"__main__\":
    count_rows('data/stage1_input.csv')
""" > test_project/f1/step_01.py

# Step 2: Validate Schema
echo """
import csv

def validate_schema(file_path, expected_columns):
    with open(file_path, mode='r') as file:
        csv_reader = csv.reader(file)
        header = next(csv_reader)
        is_valid = header == expected_columns
        print(f\"[Stage 2] Schema validation for {file_path}: {'Passed' if is_valid else 'Failed'}\")
    return is_valid

if __name__ == \"__main__\":
    validate_schema('data/stage2_input.csv', ['ID', 'Name', 'Age'])
""" > test_project/f2/step_02.py

# Step 3: Join Files
echo """
import csv

def join_files(file1_path, file2_path, key_index1, key_index2, output_file):
    with open(file1_path, mode='r') as file1, open(file2_path, mode='r') as file2:
        reader1 = csv.reader(file1)
        reader2 = csv.reader(file2)
        
        header1 = next(reader1)
        header2 = next(reader2)
        
        joined_rows = []
        for row1 in reader1:
            for row2 in reader2:
                if row1[key_index1] == row2[key_index2]:
                    joined_rows.append(row1 + row2)
        
        with open(output_file, mode='w', newline='') as output:
            writer = csv.writer(output)
            writer.writerow(header1 + header2)
            writer.writerows(joined_rows)
    
    print(f\"[Stage 3] Joined files {file1_path} and {file2_path} into {output_file}\")

if __name__ == \"__main__\":
    join_files('data/stage3_input1.csv', 'data/stage3_input2.csv', 0, 0, 'data/stage3_output.csv')
""" > test_project/f3/step_03.py

# Step 4: Filter Rows
echo """
import csv

def filter_rows(file_path, output_file, condition):
    with open(file_path, mode='r') as file:
        csv_reader = csv.reader(file)
        header = next(csv_reader)
        filtered_rows = [row for row in csv_reader if condition(row)]
        
    with open(output_file, mode='w', newline='') as output:
        writer = csv.writer(output)
        writer.writerow(header)
        writer.writerows(filtered_rows)
    
    print(f\"[Stage 4] Filtered rows from {file_path} to {output_file}\")

if __name__ == \"__main__\":
    filter_rows('data/stage4_input.csv', 'data/stage4_output.csv', lambda row: int(row[2]) > 18)
""" > test_project/f4/step_04.py

# Create main.py

echo """
import os
import sys

# Importing step functions from each module
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), 'f1')))
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), 'f2')))
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), 'f3')))
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), 'f4')))

from step_01 import count_rows
from step_02 import validate_schema
from step_03 import join_files
from step_04 import filter_rows

def main():
    # Define paths
    input_folder = 'test_project/data_prep'
    output_folder = 'test_project/data_out'
    
    # Ensure output folder exists
    if not os.path.exists(output_folder):
        os.makedirs(output_folder)

    # Step 1: Count Rows
    input_file_1 = os.path.join(input_folder, 'stage1_input.csv')
    output_file_1 = os.path.join(output_folder, 'stage1_output.txt')
    row_count = count_rows(input_file_1)
    with open(output_file_1, 'w') as f:
        f.write(f\"Number of rows: {row_count}\\n\")

    # Step 2: Validate Schema
    input_file_2 = os.path.join(input_folder, 'stage2_input.csv')
    output_file_2 = os.path.join(output_folder, 'stage2_output.txt')
    is_valid = validate_schema(input_file_2, ['ID', 'Name', 'Age'])
    with open(output_file_2, 'w') as f:
        f.write(f\"Schema validation: {'Passed' if is_valid else 'Failed'}\\n\")

    # Step 3: Join Files
    input_file_3_1 = os.path.join(input_folder, 'stage3_input1.csv')
    input_file_3_2 = os.path.join(input_folder, 'stage3_input2.csv')
    output_file_3 = os.path.join(output_folder, 'stage3_output.csv')
    join_files(input_file_3_1, input_file_3_2, 0, 0, output_file_3)

    # Step 4: Filter Rows
    input_file_4 = output_file_3  # Use output from Step 3 as input for Step 4
    output_file_4 = os.path.join(output_folder, 'stage4_output.csv')
    filter_rows(input_file_4, output_file_4, lambda row: int(row[2]) > 18)

if __name__ == \"__main__\":
    main()
""" > test_project/main.py

# Create CSV files

# Stage 1 Input CSV
echo "ID,Name,Age,Gender,Location,Occupation" > test_project/data_prep/stage1_input.csv
echo "1,Alice,25,F,New York,Engineer" >> test_project/data_prep/stage1_input.csv
echo "2,Bob,30,M,San Francisco,Designer" >> test_project/data_prep/stage1_input.csv
echo "3,Charlie,22,M,Los Angeles,Teacher" >> test_project/data_prep/stage1_input.csv
echo "4,Diana,28,F,Chicago,Doctor" >> test_project/data_prep/stage1_input.csv
echo "5,Edward,35,M,Seattle,Manager" >> test_project/data_prep/stage1_input.csv
echo "6,Fiona,26,F,Miami,Engineer" >> test_project/data_prep/stage1_input.csv
echo "7,George,33,M,Boston,Architect" >> test_project/data_prep/stage1_input.csv
echo "8,Hannah,29,F,Dallas,Lawyer" >> test_project/data_prep/stage1_input.csv
echo "9,Ian,31,M,Austin,Scientist" >> test_project/data_prep/stage1_input.csv
echo "10,Julia,27,F,Denver,Accountant" >> test_project/data_prep/stage1_input.csv

# Stage 2 Input CSV
echo "ID,Name,Age" > test_project/data_prep/stage2_input.csv
echo "1,Alice,25" >> test_project/data_prep/stage2_input.csv
echo "2,Bob,30" >> test_project/data_prep/stage2_input.csv
echo "3,Charlie,22" >> test_project/data_prep/stage2_input.csv
echo "4,Diana,28" >> test_project/data_prep/stage2_input.csv
echo "5,Edward,35" >> test_project/data_prep/stage2_input.csv
echo "6,Fiona,26" >> test_project/data_prep/stage2_input.csv
echo "7,George,33" >> test_project/data_prep/stage2_input.csv
echo "8,Hannah,29" >> test_project/data_prep/stage2_input.csv
echo "9,Ian,31" >> test_project/data_prep/stage2_input.csv
echo "10,Julia,27" >> test_project/data_prep/stage2_input.csv

# Stage 3 Input 1 CSV
echo "ID,Department,Salary" > test_project/data_prep/stage3_input1.csv
echo "1,Engineering,70000" >> test_project/data_prep/stage3_input1.csv
echo "2,Design,80000" >> test_project/data_prep/stage3_input1.csv
echo "3,Education,50000" >> test_project/data_prep/stage3_input1.csv
echo "4,Healthcare,90000" >> test_project/data_prep/stage3_input1.csv
echo "5,Management,95000" >> test_project/data_prep/stage3_input1.csv
echo "6,Engineering,72000" >> test_project/data_prep/stage3_input1.csv
echo "7,Architecture,88000" >> test_project/data_prep/stage3_input1.csv
echo "8,Legal,91000" >> test_project/data_prep/stage3_input1.csv
echo "9,Research,94000" >> test_project/data_prep/stage3_input1.csv
echo "10,Finance,68000" >> test_project/data_prep/stage3_input1.csv

# Stage 3 Input 2 CSV
echo "ID,Office,Experience" > test_project/data_prep/stage3_input2.csv
echo "1,New York,3" >> test_project/data_prep/stage3_input2.csv
echo "2,San Francisco,5" >> test_project/data_prep/stage3_input2.csv
echo "3,Los Angeles,2" >> test_project/data_prep/stage3_input2.csv
echo "4,Chicago,6" >> test_project/data_prep/stage3_input2.csv
echo "5,Seattle,8" >> test_project/data_prep/stage3_input2.csv
echo "6,Miami,4" >> test_project/data_prep/stage3_input2.csv
echo "7,Boston,7" >> test_project/data_prep/stage3_input2.csv
echo "8,Dallas,5" >> test_project/data_prep/stage3_input2.csv
echo "9,Austin,9" >> test_project/data_prep/stage3_input2.csv
echo "10,Denver,4" >> test_project/data_prep/stage3_input2.csv

# Stage 4 Input CSV
echo "ID,Name,Age,Gender,Location,Occupation" > test_project/data_prep/stage4_input.csv
echo "1,Alice,25,F,New York,Engineer" >> test_project/data_prep/stage4_input.csv
echo "2,Bob,30,M,San Francisco,Designer" >> test_project/data_prep/stage4_input.csv
echo "3,Charlie,22,M,Los Angeles,Teacher" >> test_project/data_prep/stage4_input.csv
echo "4,Diana,28,F,Chicago,Doctor" >> test_project/data_prep/stage4_input.csv
echo "5,Edward,35,M,Seattle,Manager" >> test_project/data_prep/stage4_input.csv
echo "6,Fiona,26,F,Miami,Engineer" >> test_project/data_prep/stage4_input.csv
echo "7,George,33,M,Boston,Architect" >> test_project/data_prep/stage4_input.csv
echo "8,Hannah,29,F,Dallas,Lawyer" >> test_project/data_prep/stage4_input.csv
echo "9,Ian,31,M,Austin,Scientist" >> test_project/data_prep/stage4_input.csv
echo "10,Julia,27,F,Denver,Accountant" >> test_project/data_prep/stage4_input.csv


== End of File ==

== Start of File ==
File: tests/test_project/main.py
File Type: text/x-python
Size: 2001 bytes
Last Modified: 1730631511.1870232
Contents:

import os
import sys

# Importing step functions from each module
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), 'f1')))
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), 'f2')))
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), 'f3')))
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), 'f4')))

from step_01 import count_rows
from step_02 import validate_schema
from step_03 import join_files
from step_04 import filter_rows

def main():
    # Define paths
    input_folder = 'test_project/data_prep'
    output_folder = 'test_project/data_out'
    
    # Ensure output folder exists
    if not os.path.exists(output_folder):
        os.makedirs(output_folder)

    # Step 1: Count Rows
    input_file_1 = os.path.join(input_folder, 'stage1_input.csv')
    output_file_1 = os.path.join(output_folder, 'stage1_output.txt')
    row_count = count_rows(input_file_1)
    with open(output_file_1, 'w') as f:
        f.write(f"Number of rows: {row_count}\n")

    # Step 2: Validate Schema
    input_file_2 = os.path.join(input_folder, 'stage2_input.csv')
    output_file_2 = os.path.join(output_folder, 'stage2_output.txt')
    is_valid = validate_schema(input_file_2, ['ID', 'Name', 'Age'])
    with open(output_file_2, 'w') as f:
        f.write(f"Schema validation: {'Passed' if is_valid else 'Failed'}\n")

    # Step 3: Join Files
    input_file_3_1 = os.path.join(input_folder, 'stage3_input1.csv')
    input_file_3_2 = os.path.join(input_folder, 'stage3_input2.csv')
    output_file_3 = os.path.join(output_folder, 'stage3_output.csv')
    join_files(input_file_3_1, input_file_3_2, 0, 0, output_file_3)

    # Step 4: Filter Rows
    input_file_4 = output_file_3  # Use output from Step 3 as input for Step 4
    output_file_4 = os.path.join(output_folder, 'stage4_output.csv')
    filter_rows(input_file_4, output_file_4, lambda row: int(row[2]) > 18)

if __name__ == "__main__":
    main()


== End of File ==

== Start of File ==
File: tests/test_project/f4/step_04.py
File Type: text/x-python
Size: 631 bytes
Last Modified: 1730631511.186502
Contents:

import csv

def filter_rows(file_path, output_file, condition):
    with open(file_path, mode='r') as file:
        csv_reader = csv.reader(file)
        header = next(csv_reader)
        filtered_rows = [row for row in csv_reader if condition(row)]
        
    with open(output_file, mode='w', newline='') as output:
        writer = csv.writer(output)
        writer.writerow(header)
        writer.writerows(filtered_rows)
    
    print(f"[Stage 4] Filtered rows from {file_path} to {output_file}")

if __name__ == "__main__":
    filter_rows('data/stage4_input.csv', 'data/stage4_output.csv', lambda row: int(row[2]) > 18)


== End of File ==

== Start of File ==
File: tests/test_project/f3/step_03.py
File Type: text/x-python
Size: 944 bytes
Last Modified: 1730631511.186248
Contents:

import csv

def join_files(file1_path, file2_path, key_index1, key_index2, output_file):
    with open(file1_path, mode='r') as file1, open(file2_path, mode='r') as file2:
        reader1 = csv.reader(file1)
        reader2 = csv.reader(file2)
        
        header1 = next(reader1)
        header2 = next(reader2)
        
        joined_rows = []
        for row1 in reader1:
            for row2 in reader2:
                if row1[key_index1] == row2[key_index2]:
                    joined_rows.append(row1 + row2)
        
        with open(output_file, mode='w', newline='') as output:
            writer = csv.writer(output)
            writer.writerow(header1 + header2)
            writer.writerows(joined_rows)
    
    print(f"[Stage 3] Joined files {file1_path} and {file2_path} into {output_file}")

if __name__ == "__main__":
    join_files('data/stage3_input1.csv', 'data/stage3_input2.csv', 0, 0, 'data/stage3_output.csv')


== End of File ==

== Start of File ==
File: tests/test_project/f2/step_02.py
File Type: text/x-python
Size: 442 bytes
Last Modified: 1730631511.1859188
Contents:

import csv

def validate_schema(file_path, expected_columns):
    with open(file_path, mode='r') as file:
        csv_reader = csv.reader(file)
        header = next(csv_reader)
        is_valid = header == expected_columns
        print(f"[Stage 2] Schema validation for {file_path}: {'Passed' if is_valid else 'Failed'}")
    return is_valid

if __name__ == "__main__":
    validate_schema('data/stage2_input.csv', ['ID', 'Name', 'Age'])


== End of File ==

== Start of File ==
File: tests/test_project/data_prep/stage2_input.csv
File Type: text/csv
Size: 124 bytes
Last Modified: 1730631511.1882498
Contents:
ID,Name,Age
1,Alice,25
2,Bob,30
3,Charlie,22
4,Diana,28
5,Edward,35
6,Fiona,26
7,George,33
8,Hannah,29
9,Ian,31
10,Julia,27

== End of File ==

== Start of File ==
File: tests/test_project/data_prep/stage4_input.csv
File Type: text/csv
Size: 344 bytes
Last Modified: 1730631511.1895456
Contents:
ID,Name,Age,Gender,Location,Occupation
1,Alice,25,F,New York,Engineer
2,Bob,30,M,San Francisco,Designer
3,Charlie,22,M,Los Angeles,Teacher
4,Diana,28,F,Chicago,Doctor
5,Edward,35,M,Seattle,Manager
6,Fiona,26,F,Miami,Engineer
7,George,33,M,Boston,Architect
8,Hannah,29,F,Dallas,Lawyer
9,Ian,31,M,Austin,Scientist
10,Julia,27,F,Denver,Accountant

== End of File ==

== Start of File ==
File: tests/test_project/data_prep/stage1_input.csv
File Type: text/csv
Size: 344 bytes
Last Modified: 1730631511.1876738
Contents:
ID,Name,Age,Gender,Location,Occupation
1,Alice,25,F,New York,Engineer
2,Bob,30,M,San Francisco,Designer
3,Charlie,22,M,Los Angeles,Teacher
4,Diana,28,F,Chicago,Doctor
5,Edward,35,M,Seattle,Manager
6,Fiona,26,F,Miami,Engineer
7,George,33,M,Boston,Architect
8,Hannah,29,F,Dallas,Lawyer
9,Ian,31,M,Austin,Scientist
10,Julia,27,F,Denver,Accountant

== End of File ==

== Start of File ==
File: tests/test_project/data_prep/stage3_input2.csv
File Type: text/csv
Size: 147 bytes
Last Modified: 1730631511.1891148
Contents:
ID,Office,Experience
1,New York,3
2,San Francisco,5
3,Los Angeles,2
4,Chicago,6
5,Seattle,8
6,Miami,4
7,Boston,7
8,Dallas,5
9,Austin,9
10,Denver,4

== End of File ==

== Start of File ==
File: tests/test_project/data_prep/stage3_input1.csv
File Type: text/csv
Size: 201 bytes
Last Modified: 1730631511.1886945
Contents:
ID,Department,Salary
1,Engineering,70000
2,Design,80000
3,Education,50000
4,Healthcare,90000
5,Management,95000
6,Engineering,72000
7,Architecture,88000
8,Legal,91000
9,Research,94000
10,Finance,68000

== End of File ==

== Start of File ==
File: tests/test_project/f1/step_01.py
File Type: text/x-python
Size: 350 bytes
Last Modified: 1730631511.1856513
Contents:

import csv

def count_rows(file_path):
    with open(file_path, mode='r') as file:
        csv_reader = csv.reader(file)
        row_count = sum(1 for row in csv_reader) - 1  # Exclude header
    print(f"[Stage 1] Number of rows in {file_path}: {row_count}")
    return row_count

if __name__ == "__main__":
    count_rows('data/stage1_input.csv')


== End of File ==

== Start of File ==
File: config/__init__.py
File Type: text/x-python
Size: 0 bytes
Last Modified: 1730629431.5873754
Contents:

== End of File ==

== Start of File ==
File: config/system_config.yml
File Type: application/octet-stream
Size: 2088 bytes
Last Modified: 1730629963.966474
Reason: Binary File, Skipped
== End of File ==
