# config/system_config.yml

providers:
  anthropic:
    api_base: "https://api.anthropic.com"
    context_length: 200000
    env_var: "ANTHROPIC_API_KEY"
    default_model: "claude-3-5-sonnet-20241022"  # Fixed hyphenation
    valid_models:
      - "claude-3-5-sonnet-20241022"  # Fixed
      - "claude-3-5-haiku-20241022"   # Fixed
      - "claude-3-opus-20240229"
      - "claude-3-sonnet-20240229"
      - "claude-3-haiku-20240307"
    litellm_params:
      retry: true
      max_retries: 5
      timeout: 30
      rate_limit_policy:
        tokens: 4000
        requests: 50
        period: 60
      backoff:
        initial_delay: 1
        max_delay: 30
        exponential: true

  openai:
    api_base: "https://api.openai.com/v1"
    context_length: 128000
    env_var: "OPENAI_API_KEY"
    default_model: "gpt-4o-mini"
    valid_models:
      - "gpt-4o"
      - "gpt-4o-mini"
      - "gpt-4"
      - "o1-preview"
      - "o1-mini"
    litellm_params:
      retry: true
      max_retries: 3
      timeout: 30
      rate_limit_policy:
        tokens: 4000
        requests: 200
        period: 60
      backoff:
        initial_delay: 1
        max_delay: 20
        exponential: true

  gemini:
    api_base: "https://generativelanguage.googleapis.com/v1beta"
    context_length: 32000
    env_var: "GEMINI_API_KEY"

llm_config:
  default_provider: "openai"
  default_model: "gpt-4o-mini"
  agents:
    discovery:
      default_provider: "anthropic"
      default_model: "claude-3-5-sonnet-20241022"  # Fixed hyphenation
      temperature: 0
      prompts:
        system: |
          You are a project discovery agent.
          You analyze project structure and files to understand:
          1. Project organization
          2. File relationships
          3. Code dependencies
          4. Available functionality

    solution_designer:
      provider: "anthropic"
      temperature: 0
      prompts:
        system: |
          You are an expert code modification planner.
          Your role is to analyze source code and generate precise modification instructions.

          You MUST return a JSON object with this exact structure:
          {
            "changes": [
              {
                "file_path": "exact path to file",
                "type": "modify",
                "description": "clear description of changes",
                "content": "complete new file content"
              }
            ]
          }

          Rules:
          1. Always return complete file content, not just modified functions
          2. Include all imports and dependencies in the content
          3. Use "modify" for the type field when updating existing files
          4. Keep existing functionality unless explicitly told to change it
          5. Return valid JSON matching the exact schema above

        solution: |
          Analyze the code and create modifications based on the requirements.

          Source Code:
          {source_code}

          Intent:
          {intent}

          IMPORTANT: Return a JSON object with this exact structure:
          {
            "changes": [
              {
                "file_path": "exact path from discovery data",
                "type": "modify",
                "description": "clear description of changes",
                "content": "complete file content including all imports"
              }
            ]
          }

        validation: |
          Validate the following solution:
          - Original: {original}
          - Changes: {changes}
          
          Verify:
          1. Changes preserve existing functionality
          2. All dependencies are included
          3. Changes are complete and self-contained
          4. File paths are correct
          5. Content includes complete files

    semantic_extract:
      provider: "openai"
      temperature: 0
      prompts:
        system: |
          You are a precise information extractor.
          When given content and instructions:
          1. Follow the instructions exactly as given
          2. Extract ONLY the specific information requested
          3. Return in exactly the format specified
          4. Do not add explanations or extra content
          5. Do not modify or enhance the instructions
        
        extract: |
          Extract information from the following content:
          
          Content to analyze:
          {content}
          
          Input instruction:
          {instruction}
          
          Required format:
          {format}

    semantic_iterator:
      prompts:
        system: |
          You are a semantic extraction coordinator. 
          You use fast extraction for structured content and fall back to slow extraction when needed.
          Your task is to coordinate extraction using the right mode while maintaining result consistency.
          Never modify the extraction instructions or format requirements from the caller.
          Do not add any processing or validation beyond what is specifically requested.

    semantic_fast_extractor:
      provider: "openai"
      temperature: 0
      prompts:
        system: |
          You are a precise bulk extraction agent for code changes.
          Your role is to extract change actions from any format into a consistent structure.
          Rules:
          1. Follow the extraction instruction exactly
          2. Return ONLY raw JSON - no markdown, no code blocks, no backticks
          3. Each change must include file_path, type, and either content or diff
          4. Never include explanatory text or formatting markers
          5. Extract all changes in a single pass
          6. Response must start with [ and end with ]
          7. Every string must use double quotes
          8. No comments or trailing commas allowed

        extract: |
          Extract all code change actions from the input, regardless of format.
          
          Content to analyze:
          {content}

          Each change action must include:
          1. file_path: Path of the file to modify
          2. type: One of "modify", "create", or "delete"
          3. content: The complete new content (if available)
          4. diff: Git-style diff (if content not available)
          5. description: Clear description of the change

          Input instruction:
          {instruction}

          Required format:
          {format}

          CRITICAL: Return raw JSON only. Do not wrap in code blocks or markdown.

    semantic_slow_extractor:
      provider: "openai"
      model: "gpt-4o"
      temperature: 0
      prompts:
        system: |
          You are a precise sequential extraction agent for code changes.
          Your role is to extract one change action at a time, maintaining order.
          Rules:
          1. Extract exactly ONE change per request
          2. Follow the extraction format exactly
          3. Return only the next single change object
          4. Signal NO_MORE_ITEMS when complete
          5. Never include explanatory text

        extract: |
          Extract the {ordinal} code change action from the input.
          
          Content to analyze:
          {content}
          
          Extract as a single change action with:
          1. file_path: Path of the file to modify
          2. type: One of "modify", "create", or "delete"
          3. content: The complete new content (if available)
          4. diff: Git-style diff (if content not available)
          5. description: Clear description of the change
          
          Input instruction:
          {instruction}
          
          Required format:
          {format}
          
          CRITICAL RULES:
          1. Extract ONLY the {ordinal} change
          2. Return NO_MORE_ITEMS if no more changes exist
          3. Return single change object, no array
          4. No explanations or headers
          5. Keep changes in order of appearance

    semantic_merge:
      provider: "openai"
      temperature: 0
      merge_config:
        style: "smart"
        preserve_formatting: true
        allow_partial: false
      prompts:
        system: |
          You are a precise code merger. When given code changes:

          For existing files with original code:
          1. Preserve all functionality unless explicitly changed
          2. Maintain code style and formatting
          3. Handle conflicts intelligently
          4. Never lose or corrupt code

          For new files or content without original code:
          1. Use the provided content exactly as given
          2. Keep all formatting and structure
          3. Apply no additional changes
          4. Return content as-is

        merge: |
          Process the following code merge:
          
          Original Code:
          {original}
          
          Changes to Apply:
          {changes}
          
          Merge Style: {style}
          Preserve Formatting: {preserve_formatting}
          
          Return ONLY the final merged code, no explanations or markup.

    coder:
      provider: "openai"
      temperature: 0
      prompts:
        system: |
          You are an expert code modification agent. Your task is to safely and precisely apply code changes.
          Rules:
          1. Preserve existing functionality unless explicitly told to change it
          2. Maintain code style and formatting
          3. Apply changes exactly as specified
          4. Handle errors gracefully with backups
          5. Validate code after changes
        
        merge: |
          Apply the following code changes:
          
          Original Code:
          {original}
          
          Changes to Apply:
          {changes}
          
          Merge Style: {style}
          Preserve Formatting: {preserve_formatting}
          
          Return the complete merged code without any markup or explanations.
        
        validation: |
          Validate the following changes:
          1. All functionality preserved unless explicitly changed
          2. Changes properly applied
          3. No syntax errors
          4. Style maintained
          5. No unintended side effects
        
    assurance:
      provider: "openai"
      model: "gpt-4-0125-preview"
      temperature: 0
      prompts:
        system: |
          You are a validation expert that analyzes test results.
          When given test output:
          1. Extract key success/failure indicators
          2. Identify specific test failures
          3. Extract relevant error messages
          4. Determine overall validation status
          5. Provide clear validation summary

project:
  default_path: "tests/test_projects/project1"
  workspace_root: "workspaces"
  max_file_size: 1048576

backup:
  enabled: true
  path: "workspaces/backups"
  max_backups: 5

logging:
  level: "debug"  
  format: "structured"
  agent_level: "debug"  
  providers:
    anthropic:
      level: "debug"
    openai:
      level: "debug"